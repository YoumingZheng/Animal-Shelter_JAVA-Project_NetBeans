/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.VolunteerWorkArea;

import Business.EcoSystem;
import Business.Enterprise.AnimalShelterEnterprise;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.InspectionOrganization;
import Business.Organization.Organization;
import Business.Person.Volunteer;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AdoptionWorkRequest;
import Business.WorkQueue.InspectionWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author brandonz
 */
public class AssignJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AssignJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private Organization organization;
    private Enterprise enterprise;
    private Network netWork;
    private EcoSystem system;
    private InspectionOrganization inspectionOrganization;
    public AssignJPanel(JPanel userProcessContainer,UserAccount userAccount, Organization organization, Enterprise enterprise, Network network,EcoSystem system) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.system = system;
        this.userAccount = userAccount;
        this.organization = organization;
        this.enterprise = enterprise;
        this.netWork = network;
        
        populateTable1();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        refreshJButton = new javax.swing.JButton();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        zipTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        refreshJButton.setText("Search");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });
        add(refreshJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(211, 51, -1, -1));

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });
        add(assignJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 277, -1, -1));

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 573, 137, -1));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Name", "Address", "Species", "Breed", "Gender", "Color"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable3);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 83, 816, 176));
        add(zipTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(78, 52, 115, -1));

        jLabel3.setText("Zip");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 55, -1, -1));

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Customer Name", "Address", "Species", "Breed", "Gender", "Color"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable4);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 354, 816, 201));

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(49, 629, -1, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Assign Inspection");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed
        
        populateTable();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    public void populateTable() {
       
        
        DefaultTableModel model = (DefaultTableModel) jTable3.getModel();
        model.setRowCount(0);
        /*if(zipTxt.getText().equals("") || zipTxt.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "please type zip");
        }*/
        
        if(zipTxt.getText().equals("") || zipTxt.getText().isEmpty()){
            for(InspectionWorkRequest isp : enterprise.getInspectionWorkQueue().getWorkRequestList()){
            if(isp.getStatus().equalsIgnoreCase("Sent")){
                Object[] row = new Object[6];
                row[0] = isp;
                row[1] = isp.getCustomer().getAddress();
                row[2] = isp.getAnimal().getSpecies();
                row[3] = isp.getAnimal().getBreed();
                row[4] = isp.getAnimal().getGender();
                row[5] = isp.getAnimal().getColor();
                model.addRow(row);
            }
               
            
        }
        }else{
            for(InspectionWorkRequest isp : enterprise.getInspectionWorkQueue().getWorkRequestList()){
            if(isp.getCustomer().getZipCode().equals(zipTxt.getText()) && isp.getStatus().equalsIgnoreCase("Sent")){
                Object[] row = new Object[6];
                row[0] = isp;
                row[1] = isp.getCustomer().getAddress();
                row[2] = isp.getAnimal().getSpecies();
                row[3] = isp.getAnimal().getBreed();
                row[4] = isp.getAnimal().getGender();
                row[5] = isp.getAnimal().getColor();
                model.addRow(row);
            }
        }
        }
        
        
        /*for (Network network : business.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if(enterprise instanceof AnimalShelterEnterprise){
                    //if(ase.getZipCode().equals(enterprise))
                    for(Organization o: enterprise.getOrganizationDirectory().getOrganizationList())
                        if(o instanceof InspectionOrganization)
                            for (WorkRequest request : inspectionOrganization.getWorkQueueReceived().getWorkRequestList()) {
                                 Object[] row = new Object[6];
                                row[0] = request.getAnimal().getID();
                                row[1] = request.getAnimal().getSpecies();
                                row[2] = request.getAnimal().getBreed();
                                row[3] = request.getAnimal().getGender();
                                row[4] = request.getAnimal().getColor();
                                row[5] = request.getAnimal().getAge();
                            }
                }
            }
        }*/
    }
    
     public void populateTable1() {
         DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
         model.setRowCount(0);
         
         for(InspectionWorkRequest iwr:userAccount.getInspectionWorkQueue().getWorkRequestList()){
            Object[] row = new Object[6];
            row[0] = iwr;
            row[1] = iwr.getCustomer().getAddress();
            row[2] = iwr.getAnimal().getSpecies();
            row[3] = iwr.getAnimal().getBreed();
            row[4] = iwr.getAnimal().getGender();
            row[5] = iwr.getAnimal().getColor();
            model.addRow(row);
         }
         
         
         /*
         for (InspectionWorkRequest iwr : list){
            Object[] row = new Object[6];
            row[0] =iwr;
            row[1] = iwr.getCustomer().getAddress();
            row[3] = iwr.getAnimal().getSpecies();
            row[4] = iwr.getAnimal().getBreed();
            row[5] = iwr.getAnimal().getColor();
            if(!iwr.getStatus().equals("Generated")){
                row[6] =df.format(iwr.getLastTimeCheckDate()) ;
            }else
                row[6] = "Just Generated";
            model.addRow(row);
        }
         */
         
    }
    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        int selectedRow = jTable3.getSelectedRow();

        if (selectedRow >= 0) {
            InspectionWorkRequest request = (InspectionWorkRequest) jTable3.getValueAt(selectedRow, 0);
            request.setStatus("Assigned");
            request.setVolunteer((Volunteer) userAccount.getPerson());
            enterprise.getInspectionWorkQueue().getWorkRequestList().remove(request);
            userAccount.getInspectionWorkQueue().getWorkRequestList().add(request);
            //populateTable1(request);
            populateTable1();
            populateTable();
        } else {
            JOptionPane.showMessageDialog(null, "Choose a row to assign.");
        }

    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        int selectedRow = jTable4.getSelectedRow();
        if (selectedRow >= 0) {
            InspectionWorkRequest request = (InspectionWorkRequest) jTable4.getValueAt(selectedRow, 0);
            GradeJPanel g = new GradeJPanel(userProcessContainer,userAccount,request);
            userProcessContainer.add("g",g);    
            CardLayout cardLayout = (CardLayout)userProcessContainer.getLayout();
            cardLayout.show(userProcessContainer,"g");  
  
        } else {
            JOptionPane.showMessageDialog(null, "Choose a row to process.");
        }


//        int selectedRow = workRequestJTable.getSelectedRow();
//
//        if (selectedRow >= 0) {
//            InspectionWorkRequest request = (InspectionWorkRequest) workRequestJTable.getValueAt(selectedRow, 0);
//
//            request.setStatus("Processing");
//
//            ProcessWorkRequestJPanel processWorkRequestJPanel = new ProcessWorkRequestJPanel(userProcessContainer, request);
//            userProcessContainer.add("processWorkRequestJPanel", processWorkRequestJPanel);
//            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//            layout.next(userProcessContainer);
//
//        } else {
//            JOptionPane.showMessageDialog(null, "Please select a request message to process.");
//            return;
//        }
    }//GEN-LAST:event_processJButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTextField zipTxt;
    // End of variables declaration//GEN-END:variables

   

   

 
}
